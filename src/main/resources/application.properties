#Tue Jan 02 10:04:15 CET 2024

# spring
spring.profiles.active=
server.port=${APP_PORT:8080}
# Properties to enable graceful shutdown and to configure grace period
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=2m
#server.servlet.context-path = /agnasarp-soap-course-management

# APP
info.app.name = @project.artifactId@
info.app.description = @project.description@
info.app.version = @project.version@
info.app.encoding = @project.build.sourceEncoding@
info.app.timestamp = @timestamp@
info.app.java.version = @java.version@
info.app.build.artifact = @project.artifactId@
info.app.build.group = @project.groupId@
info.app.build.version = @project.version@

# Quartz
spring.quartz.job-store-type=memory
spring.quartz.jdbc.initialize-schema=never

spring.quartz.properties.org.quartz.scheduler.instanceName=quartz-demo-app
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
spring.quartz.properties.org.quartz.threadPool.threadCount=5
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.simpl.RAMJobStore

# https://medium.com/@himsmittal/quartz-plugins-a-must-have-for-all-quartz-implementations-7ca01e98e620
#spring.quartz.properties.org.quartz.plugin.jobInterruptor.class = org.quartz.plugins.interrupt.JobInterruptMonitorPlugin
#spring.quartz.properties.org.quartz.plugin.jobInterruptor.defaultMaxRunTime=1000
#spring.quartz.properties.org.quartz.plugin.shutdownhook.class = org.quartz.plugins.management.ShutdownHookPlugin
#spring.quartz.properties.org.quartz.plugin.shutdownhook.cleanShutdown = true

# log
security.auth.username=xx

# jpa  
spring.jpa.open-in-view=false

# okta
okta.oauth2.issuer=https\://dev-72720413.okta.com/oauth2/default
okta.oauth2.client-id=0oae8r8ss1MXhxLUX5d7
okta.oauth2.client-secret=rVOd3v9EW4aBfyS4QX45H6OT-RvSZeLZOlyz_RE_mANt7goifyBz8qlK97n-MXWn

 # devtools
spring.devtools.livereload.enabled=true

# actuator
# Properties to enable and expose actuator shutdown endpoint
management.endpoint.shutdown.enabled=true
management.endpoint.loggers.enabled=true
management.endpoints.web.exposure.include=health,info,prometheus,shutdown,loggers
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always
management.endpoint.health.group.readiness.include=*
management.endpoint.health.group.readiness.show-details=always
management.endpoint.health.group.liveness.include=ping
management.endpoint.health.group.liveness.show-details=always
management.metrics.tags.application=${spring.application.name}
# Expose metrics on a separate port for internal usage
management.server.port=8080
# extra
management.info.java.enabled=true
management.info.env.enabled=true

# sleuth
spring.sleuth.web.enabled=true
spring.sleuth.sampler.probability=1.0
spring.sleuth.messaging.kafka.enabled=true
spring.sleuth.async.enabled=true
spring.sleuth.scheduled.enabled=true
spring.sleuth.integration.websockets.enabled=true
spring.sleuth.web.client.enabled=true

# zipkin
spring.zipkin.enabled=true
spring.zipkin.baseUrl=http://localhost:9411

# kafka
spring.kafka.bootstrap-servers=${CLOUDKARAFKA_BROKERS:dory.srvs.cloudkafka.com:9094}
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=SCRAM-SHA-512
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="${CLOUDKARAFKA_USERNAME:muxybvhk}" password="${CLOUDKARAFKA_PASSWORD:a1JE3KYU-IgtHIWtYu6mjWesy1ILjHC2}";
spring.kafka.consumer.group-id=${CLOUDKARAFKA_USERNAME:muxybvhk}-consumers

spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.demo.broker.*

cloudkarafka.topic=${CLOUDKARAFKA_USERNAME:muxybvhk}-default

# flyway
spring.flyway.enabled = false

# datasource
spring.datasource.url=jdbc:h2:mem:db;DB_CLOSE_ON_EXIT=TRUE
#spring.datasource.url = jdbc:h2:file:./temp/data/db
spring.datasource.username = skeleton
spring.datasource.password = skeleton
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.hikari.pool-name = API_DB-CONN-POOL
spring.datasource.hikari.maximum-pool-size = 10
spring.datasource.hikari.minimum-idle = 5
spring.datasource.hikari.idle-timeout = 240000
spring.datasource.hikari.connection-timeout = 2000
spring.datasource.hikari.connection-test-query = select 1
 
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.defer-datasource-initialization=true

# H2 Console
spring.h2.console.enabled = true
spring.h2.console.settings.web-allow-others = true
spring.h2.console.settings.trace = true

# log
#logging.level.web=INFO
#logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG

# async: tiene propiedades de spring boot
async.enabled=false
async.executor.corePoolSize=2
async.executor.maxPoolSize=10
async.executor.queueCapacity=500
async.executor.wait-for-tasks-to-complete-on-shutdown=true
async.executor.thread-name-prefix=Asyn

# springdoc
springdoc.packagesToScan = com.example.demo.controller
# no funciona
#springdoc.swagger-ui.use-root-path=true

# feign
feign.client.config.default.connectTimeout=5000
feign.client.config.default.readTimeout=5000
feign.client.config.default.loggerLevel=basic

# resilience4j
resilience4j.circuitbreaker.configs.default.sliding-window-size=6
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=3s
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=4
resilience4j.circuitbreaker.configs.default.slow-call-rate-threshold=50
resilience4j.circuitbreaker.configs.default.slow-call-duration-threshold=2s

resilience4j.timelimiter.configs.default.timeout-duration=5s
        
# customer
customer.client.url=http://localhost:8081/api/v1/customer